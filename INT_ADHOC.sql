Create database retail_analysis;

use retail_analysis;

CREATE OR REPLACE TABLE demographic_RAW
(AGE_DESC	CHAR(20),
MARITAL_STATUS_CODE	CHAR(5),
INCOME_DESC	VARCHAR(40),
HOMEOWNER_DESC	VARCHAR(40),
HH_COMP_DESC	VARCHAR(50),
HOUSEHOLD_SIZE_DESC	VARCHAR(50),
KID_CATEGORY_DESC	VARCHAR(40),
household_key INT PRIMARY KEY
);

CREATE OR REPLACE TABLE CAMPAIGN_DESC_RAW
(DESCRIPTION CHAR(10),	
CAMPAIGN	INT ,
START_DAY	INT,
END_DAY INT,
PRIMARY KEY (DESCRIPTION),
UNIQUE (CAMPAIGN));

CREATE OR REPLACE TABLE CAMPAIGN_RAW
(DESCRIPTION	CHAR(10) ,
household_key	INT,
CAMPAIGN INT,
FOREIGN KEY (DESCRIPTION) references CAMPAIGN_DESC_RAW(DESCRIPTION) ,
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN),
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);


CREATE OR REPLACE TABLE PRODUCT_RAW
(PRODUCT_ID	INT PRIMARY KEY,
MANUFACTURER 	INT,
DEPARTMENT	VARCHAR(50),
BRAND	VARCHAR(30),
COMMODITY_DESC	VARCHAR(65),
SUB_COMMODITY_DESC VARCHAR(65)	,
CURR_SIZE_OF_PRODUCT VARCHAR(15)
);


CREATE OR REPLACE TABLE COUPON_RAW
(COUPON_UPC	INT,
PRODUCT_ID	INT,
CAMPAIGN INT,
FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);


CREATE OR REPLACE TABLE COUPON_REDEMPT_RAW
(household_key	INT,
DAY	INT,
COUPON_UPC	INT,
CAMPAIGN INT,
FOREIGN KEY (household_key) references demographic_RAW(household_key),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);


CREATE OR REPLACE TABLE TRANSACTION_RAW 
(household_key	INT,
BASKET_ID	INT,
DAY	INT,
PRODUCT_ID	INT,
QUANTITY	INT,
SALES_VALUE	FLOAT,
STORE_ID	INT,
RETAIL_DISC	FLOAT,
TRANS_TIME	INT,
WEEK_NO	INT,
COUPON_DISC	INT,
COUPON_MATCH_DISC INT,
FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);


show tables;


##-creating storage integration from AWS s3##-

CREATE OR REPLACE STORAGE INTEGRATION s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = s3
ENABLED= TRUE
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::094586916622:role/retailana'
STORAGE_ALLOWED_LOCATIONS = ('s3://ashfaqretailanalysis/');

DESC integration s3_int;

##-creating stage##-
CREATE OR REPLACE STAGE RETAIL_STAGE
URL = 's3://ashfaqretailanalysis/'
FILE_FORMAT = CSV
STORAGE_INTEGRATION = s3_int;



LIST @RETAIL_STAGE;
SHOW STAGES;


##CREATING SNOWPIPES TO GET DATA FROM EXTERNAL STAGE TO EXISTING TABLE##
CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_DEMOGRAPHIC AUTO_INGEST = TRUE AS
COPY INTO RETAIL_ANALYSIS.PUBLIC.DEMOGRAPHIC_RAW ##yourdatabase ## your schema ##-your table
FROM '@RETAIL_STAGE/demographic/' ##s3 bucket subfolde4r name
FILE_FORMAT = CSV; ##YOUR CSV FILE FORMAT NAME


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN_DESC AUTO_INGEST = TRUE AS
COPY INTO RETAIL_ANALYSIS.PUBLIC.CAMPAIGN_DESC_RAW
FROM '@RETAIL_STAGE/campaign_desc/' 
FILE_FORMAT = CSV; 


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN AUTO_INGEST = TRUE AS
COPY INTO rETAIL_ANALYSIS.PUBLIC.CAMPAIGN_RAW
FROM '@RETAIL_STAGE/campaign/' 
FILE_FORMAT = CSV; 

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON_REDEMPT AUTO_INGEST = TRUE AS
COPY INTO RETAIL_ANALYSIS.PUBLIC.COUPON_REDEMPT_RAW
FROM '@RETAIL_STAGE/coupon_redempt/' 
FILE_FORMAT = CSV; 


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_PRODUCT AUTO_INGEST = TRUE AS
COPY INTO RETAIL_ANALYSIS.PUBLIC.PRODUCT_RAW
FROM '@RETAIL_STAGE/product/' 
FILE_FORMAT = CSV; 


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_TRANSACTION AUTO_INGEST = TRUE AS
COPY INTO RETAIL_ANALYSIS.PUBLIC.TRANSACTION_RAW
FROM '@RETAIL_STAGE/transaction/' 
FILE_FORMAT = CSV; 

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON AUTO_INGEST = TRUE AS
COPY INTO RETAIL_ANALYSIS.PUBLIC.COUPON_RAW
FROM '@RETAIL_STAGE/coupon/' 
FILE_FORMAT = CSV; 


show pipes;

alter pipe RETAIL_SNOWPIPE_DEMOGRAPHIC refresh;
alter pipe RETAIL_SNOWPIPE_CAMPAIGN_DESC refresh;
alter pipe RETAIL_SNOWPIPE_CAMPAIGN refresh;
alter pipe RETAIL_SNOWPIPE_COUPON_REDEMPT refresh;
alter pipe RETAIL_SNOWPIPE_PRODUCT refresh;
alter pipe RETAIL_SNOWPIPE_TRANSACTION refresh;
alter pipe RETAIL_SNOWPIPE_COUPON refresh;

select count(*) from CAMPAIGN_DESC_RAW;
select count(*) from CAMPAIGN_RAW;
select count(*) from COUPON_RAW;
select count(*) from COUPON_REDEMPT_RAW;
select count(*) from DEMOGRAPHIC_RAW;
select count(*) from PRODUCT_RAW;
select count(*) from TRANSACTION_RAW;


##pushed transformed data from python to Snowflake
SELECT COUNT(*) FROM CAMPAIGN_DESC_NEW;

SELECT COUNT(*) FROM COUPON_REDEMPT_NEW;

SELECT COUNT(*) FROM TRANSACTION_NEW;



######
select * from CAMPAIGN_DESC_RAW;
select * from CAMPAIGN_RAW;
select * from COUPON_RAW;
select * from COUPON_REDEMPT_RAW;
select * from DEMOGRAPHIC_RAW;
select * from PRODUCT_RAW;
select * from TRANSACTION_RAW;

SELECT * FROM CAMPAIGN_DESC_NEW;

SELECT * FROM COUPON_REDEMPT_NEW;

SELECT * FROM TRANSACTION_NEW;

##DEPT WISE PRODUCT COUNT

SELECT DEPARTMENT, COUNT(PRODUCT_ID) AS TOTAL_PRODUCT
FROM PRODUCT_RAW
GROUP BY 1
ORDER BY 2 DESC;

##Customer Demographics KPIs:##

SELECT * FROM DEMOGRAPHIC_RAW
LIMIT 10;

## Count of unique households: Measure the total number of unique households in the Demographic table.

SELECT COUNT(DISTINCT HOUSEHOLD_KEY)
FROM DEMOGRAPHIC_RAW;

##o Household composition distribution: Analyze the distribution of household compositions (HH_COMP_DESC) to understand the composition of households.

SELECT HH_COMP_DESC, COUNT(DISTINCT HOUSEHOLD_KEY)AS TOTAL_HOUSEHOLD
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

##o Age distribution: Calculate the percentage or count of customers in different age groups (AGE_DESC).

WITH AGE_HH AS (
SELECT AGE_DESC, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLD
FROM DEMOGRAPHIC_RAW
GROUP BY 1)
SELECT AGE_DESC,SUM(TOTAL_HOUSEHOLD), ROUND(SUM(TOTAL_HOUSEHOLD)/2500*100,2) AS HOUSEHOLD_PCT
FROM AGE_HH
GROUP BY 1
ORDER BY 2 DESC;

##o Marital status distribution: Analyze the proportion of customers in different marital status categories (MARITAL_STATUS_CODE).

WITH MARITAL_ST AS (
SELECT MARITAL_STATUS_CODE, COUNT(*) AS TOTAL_CUSTOMERS
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC)
SELECT MARITAL_STATUS_CODE, 
    SUM(TOTAL_CUSTOMERS) AS TOTAL_CUSTOMERS, 
    CONCAT(ROUND(SUM(TOTAL_CUSTOMERS)/(SELECT COUNT(*) FROM DEMOGRAPHIC_RAW) *100,2),' %') AS PCT
FROM MARITAL_ST
GROUP BY 1
ORDER BY 2,3;

##o Homeownership distribution: Calculate the percentage or count of customers who own or rent their homes (HOMEOWNER_DESC)*/
WITH HOMEOWNER_GRP AS (
SELECT HOMEOWNER_DESC, COUNT(*) AS TOTAL_CUSTOMERS
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC)
SELECT 
    HOMEOWNER_DESC, 
    SUM(TOTAL_CUSTOMERS) AS TOTAL_CUSTOMERS, 
    ROUND(SUM(TOTAL_CUSTOMERS)/(SELECT COUNT(*) FROM DEMOGRAPHIC_RAW)*100,2) AS PCT
FROM HOMEOWNER_GRP
GROUP BY 1
ORDER BY 2,3 DESC;


##2. Campaign KPIs:


SELECT * FROM CAMPAIGN_DESC_NEW
LIMIT 10;

SELECT * FROM CAMPAIGN_RAW
LIMIT 10;

##o Number of campaigns: Count the total number of campaigns in the Campaign table.

SELECT COUNT(DISTINCT CAMPAIGN)
FROM CAMPAIGN_DESC_NEW;

##o Campaign duration: Calculate the duration of each campaign by subtracting the start day from the end day (in the Campaign_desc table).

SELECT CAMPAIGN, DATEDIFF(DAY, START_DAY, END_DAY) AS CAMPAIGN_DURATION
FROM CAMPAIGN_DESC_NEW;

##o Campaign effectiveness: Analyze the number of households associated with each campaign (in the Campaign table) to measure campaign reach 
SELECT CAMPAIGN, COUNT(DISTINCT HOUSEHOLD_KEY) AS HOUSEHOLDS
FROM CAMPAIGN_RAW
GROUP BY 1
ORDER BY 2 DESC;


##*3. Coupon KPIs:


SELECT * FROM COUPON_RAW
LIMIT 10;

SELECT * FROM COUPON_REDEMPT_NEW
LIMIT 10;


/*o Coupon redemption rate: Calculate the percentage of coupons redeemed (from the 
coupon_redempt table) compared to the total number of coupons distributed (from 
the Coupon table).*/

WITH COUPON_REDEMPTION_RATE AS (
SELECT 
    COUNT(DISTINCT R.COUPON_UPC) AS COUPON_REDEEM, 
    COUNT(DISTINCT C.COUPON_UPC) AS COUPON_ISSUED
FROM 
    COUPON_RAW C LEFT JOIN
    COUPON_REDEMPT_NEW R ON
    C.CAMPAIGN=R.CAMPAIGN
ORDER BY 2 DESC)
SELECT 
    SUM(COUPON_ISSUED) AS COUPON_ISSUED, 
    SUM(COUPON_REDEEM) AS COUPON_REDEEM, 
    ROUND(SUM(COUPON_REDEEM/COUPON_ISSUED)*100,2) AS REDEMPTION_RATE
FROM COUPON_REDEMPTION_RATE
ORDER BY 3 DESC;

/*o Coupon usage by campaign: Measure the number of coupon redemptions (from 
the coupon_redempt table) for each campaign (in the Coupon table)*/

WITH COUPON_REDEMPTION_RATE_BY_CAMPAIGN AS (
SELECT 
    R.CAMPAIGN, 
    COUNT(DISTINCT R.COUPON_UPC) AS COUPON_REDEEM, 
    COUNT(DISTINCT C.COUPON_UPC) AS COUPON_ISSUED
FROM 
    COUPON_RAW C LEFT JOIN
    COUPON_REDEMPT_NEW R ON
    C.CAMPAIGN=R.CAMPAIGN
GROUP BY 1
ORDER BY 2 DESC)
SELECT 
    CAMPAIGN, 
    SUM(COUPON_ISSUED) AS COUPON_ISSUED, 
    SUM(COUPON_REDEEM) AS COUPON_REDEEM, 
    ROUND(SUM(COUPON_REDEEM/COUPON_ISSUED)*100,2) AS REDEMPTION_RATE
FROM COUPON_REDEMPTION_RATE_BY_CAMPAIGN
GROUP BY 1
ORDER BY 3 DESC;


/*4. Product KPIs:*/

SELECT * FROM PRODUCT_RAW
LIMIT 10;

SELECT * FROM TRANSACTION_NEW
LIMIT 10;

##o Sales value: Calculate the total sales value for each product (in the Transaction_data table) to identify top-selling products.

SELECT PRODUCT_ID, SUM(SALES_VALUE) AS TOTAL_SALES
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;

##o Manufacturer distribution: Analyze the distribution of products across different manufacturers (in the Product table).

WITH MF_DISTRUBUTION AS (
SELECT 
    MANUFACTURER, 
    COUNT(PRODUCT_ID) AS PRODUCTS
FROM PRODUCT_RAW
GROUP BY 1
ORDER BY 2 DESC)
SELECT 
    MANUFACTURER, 
    SUM(PRODUCTS), 
    CONCAT(ROUND(SUM(PRODUCTS)/(SELECT COUNT(PRODUCT_ID) FROM PRODUCT_RAW)*100,2), ' %') AS SHARE_PCT
FROM MF_DISTRUBUTION
GROUP BY 1
ORDER BY 2 DESC;

##o Department-wise sales: Measure the sales value by department (in the Product table) to understand which departments contribute most to revenue.


SELECT P.DEPARTMENT, SUM(T.SALES_VALUE) AS TOTAL_SALES
FROM PRODUCT_RAW P JOIN
TRANSACTION_NEW T ON
P.PRODUCT_ID = T.PRODUCT_ID
GROUP BY 1
ORDER BY  2 DESC;


##o Brand-wise sales: Calculate the sales value for each brand (in the Product table) to identify top-selling brands

SELECT P.BRAND, SUM(T.SALES_VALUE) AS TOTAL_SALES
FROM PRODUCT_RAW P JOIN
TRANSACTION_NEW T ON
P.PRODUCT_ID = T.PRODUCT_ID
GROUP BY 1
ORDER BY  2 DESC;


##5. Transaction KPIs:

SELECT * FROM  TRANSACTION_NEW
LIMIT 10;

##o Total sales value: Calculate the sum of sales values (in the Transaction_data table) to measure overall revenue.

SELECT SUM(SALES_VALUE) FROM TRANSACTION_NEW;

##SALES BY YEAR & MONTH

SELECT YEAR(DATE), MONTH(DATE), SUM(SALES_VALUE)
FROM TRANSACTION_NEW
GROUP BY 1,2
ORDER BY 1,2;

##o Average transaction value: Calculate the average sales value per transaction to understand customer spending patterns.
SELECT SUM(SALES_VALUE)/COUNT(*) AS AVG_SALES_VALUE
FROM TRANSACTION_NEW;

SELECT AVG(SALES_VALUE)
FROM TRANSACTION_NEW;

##o Quantity sold: Measure the total quantity sold (in the Transaction_data table) to understand product demand.

SELECT SUM(QUANTITY) AS TOTAL_QUANTITY FROM TRANSACTION_NEW;

##QUANTITY SOLD BY PRODUCT
SELECT PRODUCT_ID, SUM(QUANTITY) AS TOTAL_QUANTITY
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;

##o Discounts: Analyze the amount and impact of discounts (RETAIL_DISC, COUPON_DISC, COUPON_MATCH_DISC) on sales value

SELECT
    SUM(SALES_VALUE) AS TotalSalesValue,
    SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS TotalDiscountAmount,
    (SUM(RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) / SUM(SALES_VALUE)) * 100 AS DiscountPercentage,
    (TotalSalesValue - ABS(TotalDiscountAmount)) AS FINAL_SALE
FROM
    TRANSACTION_NEW;

